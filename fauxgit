#!/usr/bin/python
# FAUX GIT v0

from __future__ import print_function

import argparse
import datetime
import re
import sys

import git
from git import Repo

#repo = Repo('./test')
repo = None

### Datetime utility functions
def datetimeToString(t):
	return datetime.datetime.strftime(t,"%Y-%m-%d %H:%M")

def datetimeToGitString(t):
	return datetime.datetime.strftime(t,"%a %b %d %H:%M:%S %Y %z").strip()

def secondsBetweenDateTimes(dt1,dt2):
	delta = (dt2 - dt1)
	return delta.days*24*60*60 + delta.seconds

### Argument type checkers
def argtype_path(value):
	global repo
	repo = Repo(value)
	return value

def argtype_ref(value):
	try:
		value = str(repo.commit(value))
	except git.exc.BadObject, e:
		raise argparse.ArgumentTypeError("%s is not a valid ref for this git repo" % value)
	return value

def argtype_datetime(value):
	try:
		value = datetime.datetime.strptime(value,"%Y-%m-%d %H:%M")
	except ValueError, e:
		raise argparse.ArgumentTypeError("%s is not a valid date-time in the format YYYY-MM-DD HH:MM" % value)
	return value

def argtype_email(value):
	## This is a very simplistic email validator, adequate for the purpose here
	if re.match('[\.\w]{1,}[@]\w+[.]\w+',value):
		return value
	else:
		raise argparse.ArgumentTypeError("%s is not a valid email address" % value)

## Prompter
def prompt(message,type=None, default=None,allow_empty=False):
	if allow_empty == True:
		promptMessage = "%s [leave empty for no change] > " % message
	elif default is None:
		promptMessage = "%s > " % message
	else:
		promptMessage = "%s [%s] > " % (message, default)
	while True:
		value = raw_input(promptMessage)
		if (value=='' and allow_empty == True):
			return None
		if (value=='' and default is not None):
			value = default
		if type is not None:
			try:
				value = type(value)
				break
			except argparse.ArgumentTypeError, e:
				print(e)
				continue
			except ValueError, e:
				print(e)
				continue
	return value


## Set up the argument parser
parser = argparse.ArgumentParser(description='Faux Git')
parser.add_argument('path',help='Path to git repo',default='.',nargs='?',type=argtype_path)
parser.add_argument('--ref',help='Git ref',default=None,type=argtype_ref)
parser.add_argument('--count',help='How many?',default=None,type=int)
parser.add_argument('--time',help='Start here',default=None,type=argtype_datetime)
parser.add_argument('--time-end',help='End here',default=None,type=argtype_datetime)
parser.add_argument('--name',help='Who you is',default=None)
parser.add_argument('--email',help='Who you is by email',default=None,type=argtype_email)
parser.add_argument('--force',help='Force',default=False,action='store_true')
args = parser.parse_args(sys.argv[1:])

## If no ref specified, ask for one
if args.ref is None:
	args.ref = prompt("Git ref?",type=argtype_ref)

## If no count is specified, ask for one
if args.count is None:
	args.count = prompt("How many?",type=int, default=1)

## Get the commits
commits = list(repo.iter_commits(args.ref,max_count=args.count))

## Check all commits to see if they're in a remote branch
if (args.force == False):
	for commit in commits:
		if len(repo.git.branch("-r", "--contains=%s" % str(commit)).strip()) > 0:
			raise Exception("NO, THERE ARE SOME COMMITS IN THERE THAT HAVE BEEN PUSHED!")
			
## Figure out the time window the commits span
commitsTimeDelta = float(commits[0].committed_date - commits[len(commits)-1].committed_date)

## If no time is specified, ask for one
if args.time is None:
	args.time = prompt("Start Time?",type=argtype_datetime,allow_empty=True)

## If no end time is specified, ask for one (if theres more than one commit to operate on)
if args.time is not None and args.time_end is None and args.count > 1:
	suggestedTimeEnd = datetimeToString(args.time + datetime.timedelta(seconds=commitsTimeDelta))
	args.time_end = prompt("End Time?",type=argtype_datetime,default=suggestedTimeEnd)
else:
	args.time_end = args.time

## If no name is specified, ask for one - but allow it to be empty to mean 'no change'
if args.name is None:
	args.name = prompt("Name?",type=str, allow_empty=True)

## If no email is specified, ask for one - but allow it to be empty to mean 'no change'
if args.email is None:
	args.email = prompt("Email?",type=argtype_email, allow_empty=True)


def translateDatetime(t):
	if (commitsTimeDelta > 0):
		seconds = round(((t-commits[len(commits)-1].committed_date)/commitsTimeDelta) * secondsBetweenDateTimes(args.time, args.time_end))
		return args.time + datetime.timedelta(seconds=seconds)
	else:
		return args.time

print ("Operating on %d commits" % len(commits))
print ()
datetimeHashes = []
for commit in reversed(commits):
	commitDatetime = datetime.datetime.fromtimestamp(commit.committed_date)
	authorDatetime = datetime.datetime.fromtimestamp(commit.authored_date)
	print("%s <%s> => %s <%s>" % (commit.committer.name, commit.committer.email, args.name, args.email))
	if (args.time is not None):
		translatedDatetime = translateDatetime(commit.committed_date)
		datetimeHashes.append("FAUX_DATES[X_%s]=\"%s\"" % (str(commit), datetimeToGitString(translatedDatetime)))
		print("%s => %s" % (datetimeToString(commitDatetime), datetimeToString(translatedDatetime)))
	print()
next

print()
print()

output = '''
git filter-branch --env-filter '
    FAUX_HASH_START="%s"
    FAUX_HASH_END="%s"
    FAUX_EMAIL="%s"
    FAUX_NAME="%s"
    declare -A FAUX_DATES
    %s
    FAUX_RUN=0
    if [ $FAUX_HASH_START == $GIT_COMMIT ]; then
        export FAUX_RUN=1
    elif [ $FAUX_HASH_END == $GIT_COMMIT ]; then
        FAUX_RUN=1
    elif git rev-list $FAUX_HASH_START...$FAUX_HASH_END | grep $GIT_COMMIT; then
        FAUX_RUN=1
    fi
    if [ $FAUX_RUN -eq 1 ]; then
        if [ -n "${FAUX_DATES[X_${GIT_COMMIT}]}" ]; then
            export GIT_AUTHOR_DATE=${FAUX_DATES["X_"$GIT_COMMIT]}
            export GIT_COMMITTER_DATE=${FAUX_DATES["X_"$GIT_COMMIT]}
        else:
            export GIT_AUTHOR_DATE=$GIT_AUTHOR_DATE
            export GIT_COMMITTER_DATE=$GIT_COMMITTER_DATE
        fi
        if [ -n "$FAUX_NAME" ]; then
            export GIT_AUTHOR_NAME=$FAUX_NAME
            export GIT_COMMITTER_NAME=$FAUX_NAME
        fi
        if [ -n "$FAUX_EMAIL" ]; then
            export GIT_AUTHOR_EMAIL=$FAUX_EMAIL
            export GIT_COMMITTER_EMAIL=$FAUX_EMAIL
        fi
    fi
' --  --all
rm -rf .git-rewrite
git for-each-ref --format="%%(refname)" refs/original/ | xargs -n 1 git update-ref -d
''' % (
	str(commits[len(commits)-1]),
	str(commits[0]),
	args.email if args.email is not None else "",
	args.name if args.name is not None else "",
	"\n    ".join(datetimeHashes)
)

print(output)
